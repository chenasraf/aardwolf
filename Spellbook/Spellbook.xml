<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- MuClient version 5.07-pre -->
<!-- Author: Chen Asraf <contact@casraf.dev> (KumoGami) -->
<!-- Source: https://github.com/chenasraf/aardwolf/tree/master/Spellbook -->
<!-- Plugin "Spellbook" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Spellbook"
   author="KumoGami"
   id="cd6018d26b76bece198ecad8"
   language="Lua"
   purpose="Lists all spells in a sticky window for reference"
   save_state="y"
   date_written="2024-10-08 00:56:30"
   requires="5.07"
   version="1.32"
   >
</plugin>

<!--  Main Script  -->

<script><![CDATA[
-- utils

string.lpad = function(str, len, char)
  if char == nil then char = ' ' end
  return string.rep(char, len - #str) .. str
end

string.rpad = function(str, len, char)
  if char == nil then char = ' ' end
  return str .. string.rep(char, len - #str)
end

utils.unserialize = function (s)
  local f = load("return " .. s)
  if f then
    return f()
  end
end

utils.serialize = function (t)
  local s = "{"
  for k, v in pairs(t) do
    s = s .. '["' .. k .. '"]' .. " = " .. tostring(v) .. ", "
  end
  return s .. "}"
end

logger = {}
local function withColor(color)
  return function (text)
    ColourNote(color, "", text)
  end
end
logger.Cyan = withColor("cyan")
logger.Yellow = withColor("yellow")

-- funcs

require "themed_miniwindows"

SpWin = nil
Spw = {}
SpWinData = {}
SpWinIgnore = {}
SpWinLv = 0

function Spw.Init()
  local ignore = GetVariable("SpWinIgnore")
  if ignore then
    SpWinIgnore = utils.unserialize(ignore)
    if not SpWinIgnore then
      SpWinIgnore = {}
    end
  end
end

function Spw.GenerateSpellWindow()
  local function practice(sp)
    if GetVariable("SpWinPrac") == "one" then
      return "Send('practice " .. sp.id .. "')"
    else
      return "Send('practice " .. sp.id .. " full')"
    end
  end

  local function cast(sp)
    return "Send('cast " .. sp.id .. "')"
  end

  local lv = 0
  for i, sp in ipairs(SpWinData) do
    local line = ""
    if not SpWinIgnore[sp.id] then
      local hLen = 9
      local lvlLen = 3
      local nameLen = 30
      local learnedLen = 4

      if sp.level > lv then
        line = line .. "@W" .. string.rpad("lv " .. sp.level, 7)
        lv = sp.level
        hLen = 8
      else
        line = line .. string.rpad("", 8)
      end

      line = line .. "@M[@G" .. string.lpad(sp.id, lvlLen) .. "@M] "
      line = line .. "@C" .. string.rpad(sp.name, nameLen)
      line = line .. "@Y" .. string.lpad(sp.learned .. "%", learnedLen)

      local castTooltip = "Cast spell: " .. sp.name
      local pracTooltip = "Practice spell: " .. sp.name
      local spNameStart = hLen + 1 + lvlLen + 1
      local spNameEnd = spNameStart + #sp.name
      SpWin:add_text(
        line,
        true,
        {
          { label = castTooltip, start = 1,                     stop = spNameEnd, text = cast(sp) },
          { label = pracTooltip, start = spNameStart + nameLen, stop = #line,     text = practice(sp) },
        }
      )
    end
  end

  logger.Yellow("Output captured to window.")
  EnableTriggerGroup("spellbook", false)
end

function Spw.ShowSpellWindow(rest)
  SpWin = ThemedTextWindow("SpWin", 200, 200, 600, 500, "Spellbook", "center", true, true, true)

  EnableTriggerGroup("spellbook")
  SpWinData = {}
  Send("spells" .. rest)
end

function Spw.CollectSpellRow(name, mana, learned, spn)
  table.insert(SpWinData, {
    level = SpWinLv,
    name = name,
    mana = mana,
    learned = learned,
    id = spn
  })
end

function Spw.SpwCommand(main, args)
  local function showHelp()
    logger.Cyan("Spellbook window commands")
    logger.Cyan("----------------------------------------------------------------")
    logger.Cyan("spw enable               - Enable spellbook")
    logger.Cyan("spw disable              - Disable spellbook")
    logger.Cyan("spw hide <spell id>      - Hide spell from spellbook")
    logger.Cyan("spw unhide <spell id>    - Unhide spell from spellbook")
    logger.Cyan("spw hidden               - List hidden spells")
    logger.Cyan("spw prac                 - Display practice % mode")
    logger.Cyan("spw prac one             - Practice spell % once per click")
    logger.Cyan("spw prac full            - Practice spell % to full on click")
  end

  if main == 'disable' or main == 'off' then
    SpWin:hide()
    EnableAliasGroup("spellbook", false)
    EnableTriggerGroup("spellbook", false)
    logger.Yellow("Spellbook disabled.")
  elseif main == 'enable' or main == 'on' then
    EnableAliasGroup("spellbook", true)
    EnableTriggerGroup("spellbook", true)
    logger.Yellow("Spellbook enabled.")
  elseif main == 'hide' then
    local sp = args[2]
    if not sp then
      logger.Yellow("Usage: spw hide <spell id>")
      return
    end
    SpWinIgnore[sp] = true
    SetVariable("SpWinIgnore", utils.serialize(SpWinIgnore))
    logger.Yellow("Spell " .. sp .. " hidden.")
  elseif main == 'unhide' then
    local sp = args[2]
    if not sp then
      logger.Yellow("Usage: spw unhide <spell id>")
      return
    end
    SpWinIgnore[sp] = nil
    SetVariable("SpWinIgnore", utils.serialize(SpWinIgnore))
    logger.Yellow("Spell " .. sp .. " unhidden.")
  elseif main == 'hidden' then
    local hidden = ""
    for sp, _ in pairs(SpWinIgnore) do
      hidden = hidden .. sp .. ", "
    end
    if hidden == "" then
      hidden = "None"
    else
      hidden = hidden:sub(1, -3)
    end
    logger.Yellow("Hidden spells: " .. hidden)
  elseif main == 'prac' then
    local mode = args[2]
    if mode == 'one' then
      SetVariable("SpWinPrac", "one")
      logger.Yellow("Spellbook practice mode set to 'one'.")
    elseif mode == 'full' then
      SetVariable("SpWinPrac", "full")
      logger.Yellow("Spellbook practice mode set to 'full'.")
    else
      logger.Yellow("Spellbook practice mode is currently set to " .. GetVariable("SpWinPrac") .. ".")
    end
  else
    showHelp()
  end
end

-- hooks

function OnPluginInstall()
  Spw.Init()
end
]]></script>

<!--  Triggers  -->

<triggers>
  <trigger
   group="spellbook"
   match="           Spell name                 Mana  Learned  Spell#"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>--</send>
  </trigger>
  <trigger
   group="spellbook"
   match="^\s+ ([\w\s]+[\w])\s+([\d]+)\s+([\d]+)%\s+([\d]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
    <!-- Trigger with spell row, so we collect the data -->
    <send>Spw.CollectSpellRow("%1", "%2", "%3", "%4")</send>
  </trigger>
  <trigger
   group="spellbook"
   match="^Level ([\d]+)\s*: ([\w\s]+[\w])\s+([\d]+)\s+([\d]+)%\s+([\d]+)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
    <!-- Trigger with level info, so we register the level and collect the rest -->
    <send>
      SpWinLv = %1
      Spw.CollectSpellRow("%2", "%3", "%4", "%5")
    </send>
  </trigger>
  <trigger
   group="spellbook"
   match="To see all skills/spells for your class, use 'allspells &lt;class&gt;'"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
    <!-- This is the last trigger, so we finalize the data and generate the window -->
    <send>Spw.GenerateSpellWindow()</send>
  </trigger>
  <trigger
   group="spellbook"
   match="-----------------------------------------------------------"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>--</send>
  </trigger>
  <trigger
   group="spellbook"
   match="---------- -------------------------- ----  -------  ------"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>--</send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="^(sp|spe|spell|spells)( .+)?$"
   enabled="y"
   group="spellbook"
   regexp="y"
   send_to="12"
   sequence="100"
  >
    <!-- Shows the spellbook window, then starts collecting spell data -->
    <send>Spw.ShowSpellWindow("%2")</send>
  </alias>
  <alias
   match="^spw (.+)?$"
   enabled="y"
   group="spellbook_config"
   regexp="y"
   send_to="12"
   sequence="100"
  >
    <!-- spw command - help, info and configs -->
    <send>
      local args = utils.split("%1", " ")
      local main = args[1]

      Spw.SpwCommand(main, args)
    </send>
  </alias>
</aliases>

<!--  Variables  -->
<variables>
  <variable name="SpWinIgnore">{}</variable>
  <variable name="SpWinPrac">full</variable>
</variables>

</muclient>
